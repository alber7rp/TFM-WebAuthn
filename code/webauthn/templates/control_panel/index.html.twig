{% extends 'base.html.twig' %}

{% block title %}TFM WebAuthn{% endblock %}

{% block body %}

        <script>
        function register(){
          var credentials = {Username: $('#usernameregister').val(), Password: $('#passwordregister').val()};
          return $.ajax({
                type: 'POST',
                url: "/register",
                data: credentials,
                dataType: "text",
                success: function(resultData) {
                  resultData = JSON.parse(resultData);
                  if(resultData.status == "success"){
                    swal({
                      title: "Completed registration",
                      text: "Do you want register a new WebAuthn credential?",
                      icon: "success",
                      buttons: true,
                      dangerMode: false,
                    })
                    .then((confirm) => {
                      if (confirm) {
                        newregistration();
                      } else {
                        window.location.replace("");
                      }
                    });
                  }
                  else{
                    alert("ERROR");
                  }
                }
          });
        }

        function login(){
          var credentials = {Username: $('#usernamelogin').val(), Password: $('#passwordlogin').val()};
          return $.ajax({
                type: 'POST',
                url: "/login",
                data: credentials,
                dataType: "text",
                success: function(resultData) {
                  resultData = JSON.parse(resultData);
                  if(resultData.status == "success"){
                    if(resultData.credentials != "no"){
                      webauthnlogin();
                    }
                    else{
                      window.location.replace("");
                    }
                  }
                  else{
                    swal("Error", "Incorrect login", "error");
                  }
                }
          });
        }


        function newregistration() {

            // get default args
            window.fetch('/webauthn/getCreateArgs', {method:'GET',cache:'no-cache'}).then(function(response) {
                return response.json();

                // convert base64 to arraybuffer
            }).then(function(json) {

                // error handling
                if (json.success === false) {
                    throw new Error(json.msg);
                }

                // replace binary base64 data with ArrayBuffer. a other way to do this
                // is the reviver function of JSON.parse()
                recursiveBase64StrToArrayBuffer(json);
                return json;

               // create credentials
            }).then(function(createCredentialArgs) {
                console.log(createCredentialArgs);
                return navigator.credentials.create(createCredentialArgs);

                // convert to base64
            }).then(function(cred) {
                return {
                    clientDataJSON: cred.response.clientDataJSON  ? arrayBufferToBase64(cred.response.clientDataJSON) : null,
                    attestationObject: cred.response.attestationObject ? arrayBufferToBase64(cred.response.attestationObject) : null
                };

                // transfer to server
            }).then(JSON.stringify).then(function(AuthenticatorAttestationResponse) {
                return window.fetch('/webauthn/processCreate', {method:'POST', body: AuthenticatorAttestationResponse, cache:'no-cache'});

                // convert to JSON
            }).then(function(response) {
                return response.json();

                // analyze response
            }).then(function(json) {
               if (json.success) {
                   swal("Registration success", "", "success");
               } else {
                   throw new Error(json.msg);
               }

               // catch errors
            }).catch(function(err) {
                swal("Error", "Unknown error occured", "error");
            });
        }


        /**
         * checks a FIDO2 registration
         * @returns {undefined}
         */
        function webauthnlogin() {

            // get default args
            window.fetch('/webauthn/getGetArgs', {method:'GET',cache:'no-cache'}).then(function(response) {
                return response.json();

                // convert base64 to arraybuffer
            }).then(function(json) {

                // error handling
                if (json.success === false) {
                    throw new Error(json.msg);
                }

                // replace binary base64 data with ArrayBuffer. a other way to do this
                // is the reviver function of JSON.parse()
                recursiveBase64StrToArrayBuffer(json);
                return json;

               // create credentials
            }).then(function(getCredentialArgs) {
                return navigator.credentials.get(getCredentialArgs);

                // convert to base64
            }).then(function(cred) {
                return {
                    id: cred.rawId ? arrayBufferToBase64(cred.rawId) : null,
                    clientDataJSON: cred.response.clientDataJSON  ? arrayBufferToBase64(cred.response.clientDataJSON) : null,
                    authenticatorData: cred.response.authenticatorData ? arrayBufferToBase64(cred.response.authenticatorData) : null,
                    signature : cred.response.signature ? arrayBufferToBase64(cred.response.signature) : null
                };

                // transfer to server
            }).then(JSON.stringify).then(function(AuthenticatorAttestationResponse) {
                return window.fetch('/webauthn/processGet', {method:'POST', body: AuthenticatorAttestationResponse, cache:'no-cache'});

                // convert to json
            }).then(function(response) {
                return response.json();

                // analyze response
            }).then(function(json) {
               if (json.success) {
                   swal("Login success", "", "success").then(() => {window.location.replace("");});
               } else {
                   throw new Error(json.msg);
               }

               // catch errors
            }).catch(function(err) {
                swal("Error", "Unknown error occured", "error");
            });
        }

        /**
         * convert RFC 1342-like base64 strings to array buffer
         * @param {mixed} obj
         * @returns {undefined}
         */
        function recursiveBase64StrToArrayBuffer(obj) {
            let prefix = '?BINARY?B?';
            let suffix = '?=';
            if (typeof obj === 'object') {
                for (let key in obj) {
                    if (typeof obj[key] === 'string') {
                        let str = obj[key];
                        if (str.substring(0, prefix.length) === prefix && str.substring(str.length - suffix.length) === suffix) {
                            str = str.substring(prefix.length, str.length - suffix.length);

                            let binary_string = window.atob(str);
                            let len = binary_string.length;
                            let bytes = new Uint8Array(len);
                            for (var i = 0; i < len; i++)        {
                                bytes[i] = binary_string.charCodeAt(i);
                            }
                            obj[key] = bytes.buffer;
                        }
                    } else {
                        recursiveBase64StrToArrayBuffer(obj[key]);
                    }
                }
            }
        }

        /**
         * Convert a ArrayBuffer to Base64
         * @param {ArrayBuffer} buffer
         * @returns {String}
         */
        function arrayBufferToBase64(buffer) {
            var binary = '';
            var bytes = new Uint8Array(buffer);
            var len = bytes.byteLength;
            for (var i = 0; i < len; i++) {
                binary += String.fromCharCode( bytes[ i ] );
            }
            return window.btoa(binary);
        }


        </script>
    <div class="container-fluid">
      <div class="row">
          <div class="offset-md-2 col-md-4">
            <h2> Register Form </h2>
              <div class="form-group">
                <label >Username</label>
                <input type="text" class="form-control" id="usernameregister" placeholder="Enter username">
              </div>
              <div class="form-group">
                <label >Password</label>
                <input type="password" class="form-control" id="passwordregister" placeholder="Password">
              </div>
              <button type="button" class="btn btn-light" onclick="register()">Register</button>
          </div>

          <div class="offset-md-1 col-md-4">
            <h2> Login Form </h2>
              <div class="form-group">
                <label >Username</label>
                <input type="text" class="form-control" id="usernamelogin" placeholder="Enter username">
              </div>
              <div class="form-group">
                <label >Password</label>
                <input type="password" class="form-control" id="passwordlogin" placeholder="Password">
              </div>
              <button type="button" class="btn btn-primary" onclick="login()">Login</button>
          </div>
      </div>
    </div>


{% endblock %}
